name: Ghost Image

on:
  workflow_call:
    inputs:
      repo-name:
        required: true
        type: string
      image-name:
        required: true
        type: string
      stack-name:
        required: true
        type: string
      vault-id:
        required: true
        type: string
      item-id:
        required: true
        type: string
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN:
        required: true

permissions:
  packages: write

jobs:
  build-and-push-image:
    name: Build & Push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        # with:
        #   repository: ${{ inputs.repo-name }}
        #   token: ${{ github.token }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ inputs.image-name}}:latest

  deploy-image:
    name: Docker Stack Deploy
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Load secret
        id: op-load-secret
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
        env:
          GIT_BRANCH: "main"
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          TS_OAUTH_CLIENT_ID: "op://Coto.Studio - Deploy/hhiitsau5hvn3mzvitvco2pysu/Client ID"
          TS_OAUTH_SECRET: "op://Coto.Studio - Deploy/hhiitsau5hvn3mzvitvco2pysu/credential"
          PUSHOVER_USER_KEY: "op://Coto.Studio - Deploy/Pushover/credential"
          PUSHOVER_API_TOKEN: "op://Coto.Studio - Deploy/Pushover/Docker Swarm/API Token"
          # Ghost Config
          DEPLOY_HOST: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/deploy/host"
          DEPLOY_SERVICE_ID: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/deploy/serviceID"
          GHOST_DOMAIN: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/domain/main"
          MYSQL_PORT: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/mysql/port"
          MYSQL_USER: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/mysql/user"
          MYSQL_PASSWORD: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/mysql/password"
          MYSQL_DATABASE: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/mysql/database"
          MAIL_HOST: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/mail/host"
          MAIL_PORT: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/mail/port"
          MAIL_SERVICE: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/service"
          MAIL_USER: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/username"
          MAIL_PASS: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/password"
          STORAGE_ACCESS_KEY_ID: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/storage/accessKeyId"
          STORAGE_SECRET_ACCESS_KEY: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/storage/secretAccessKey"
          STORAGE_ASSET_HOST: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/storage/assetHost"
          STORAGE_BUCKET: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/storage/bucket"
          STORAGE_ENDPOINT: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/storage/endpoint"
          STORAGE_GPG_PASSPHRASE: "op://${{ inputs.vault-id }}/${{ inputs.item-id }}/storage/gpgPassphrase"

      - name: Tailscale
        uses: Coto-Studio/tailscale-action@main
        if: ${{ github.event.act }} # use during local actions testing
        with:
          oauth-client-id: $TS_OAUTH_CLIENT_ID
          oauth-secret: $TS_OAUTH_SECRET
          tags: tag:cicd
          args: --accept-dns
          use-cache: "true"

      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        if: ${{ !github.event.act }} # skip during local actions testing
        with:
          oauth-client-id: $TS_OAUTH_CLIENT_ID
          oauth-secret: $TS_OAUTH_SECRET
          tags: tag:cicd
          args: --accept-dns
          use-cache: "true"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Docker Stack Deploy
        uses: Coto-Studio/stack-deploy-action@master
        with:
          name: ${{ inputs.stack-name }}
          file: docker-stack.yaml
          host: ${{ env.DEPLOY_HOST }}
          user: root
          tailscale: true
          registry_auth: true
          registry_host: https://ghcr.io
          registry_user: ${{ github.actor }}
          registry_pass: ${{ secrets.GITHUB_TOKEN }}

      - name: pushover-actions
        if: always()
        uses: umahmood/pushover-actions@main
        env:
          PUSHOVER_TOKEN: ${{ env.PUSHOVER_API_TOKEN }}
          PUSHOVER_USER: ${{ env.PUSHOVER_USER_KEY }}
        with:
          status: ${{ job.status }}
          title: "${{ github.workflow }}"
          message: "The GitHub Workflow, ${{ github.workflow }} was run for the repository ${{ github.repository }} with the status of ${{ job.status }}"
